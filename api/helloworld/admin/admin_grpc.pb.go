// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/helloworld/admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LayoutAdminClient is the client API for LayoutAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LayoutAdminClient interface {
	PageBot(ctx context.Context, in *PageBotRequest, opts ...grpc.CallOption) (*PageBotReply, error)
	ListBot(ctx context.Context, in *ListBotRequest, opts ...grpc.CallOption) (*ListBotReply, error)
	GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*GetBotReply, error)
	CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*CreateBotReply, error)
	UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...grpc.CallOption) (*UpdateBotReply, error)
	DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...grpc.CallOption) (*DeleteBotReply, error)
}

type layoutAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewLayoutAdminClient(cc grpc.ClientConnInterface) LayoutAdminClient {
	return &layoutAdminClient{cc}
}

func (c *layoutAdminClient) PageBot(ctx context.Context, in *PageBotRequest, opts ...grpc.CallOption) (*PageBotReply, error) {
	out := new(PageBotReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.admin.LayoutAdmin/PageBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutAdminClient) ListBot(ctx context.Context, in *ListBotRequest, opts ...grpc.CallOption) (*ListBotReply, error) {
	out := new(ListBotReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.admin.LayoutAdmin/ListBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutAdminClient) GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*GetBotReply, error) {
	out := new(GetBotReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.admin.LayoutAdmin/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutAdminClient) CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*CreateBotReply, error) {
	out := new(CreateBotReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.admin.LayoutAdmin/CreateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutAdminClient) UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...grpc.CallOption) (*UpdateBotReply, error) {
	out := new(UpdateBotReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.admin.LayoutAdmin/UpdateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutAdminClient) DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...grpc.CallOption) (*DeleteBotReply, error) {
	out := new(DeleteBotReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.admin.LayoutAdmin/DeleteBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LayoutAdminServer is the server API for LayoutAdmin service.
// All implementations must embed UnimplementedLayoutAdminServer
// for forward compatibility
type LayoutAdminServer interface {
	PageBot(context.Context, *PageBotRequest) (*PageBotReply, error)
	ListBot(context.Context, *ListBotRequest) (*ListBotReply, error)
	GetBot(context.Context, *GetBotRequest) (*GetBotReply, error)
	CreateBot(context.Context, *CreateBotRequest) (*CreateBotReply, error)
	UpdateBot(context.Context, *UpdateBotRequest) (*UpdateBotReply, error)
	DeleteBot(context.Context, *DeleteBotRequest) (*DeleteBotReply, error)
	mustEmbedUnimplementedLayoutAdminServer()
}

// UnimplementedLayoutAdminServer must be embedded to have forward compatible implementations.
type UnimplementedLayoutAdminServer struct {
}

func (UnimplementedLayoutAdminServer) PageBot(context.Context, *PageBotRequest) (*PageBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageBot not implemented")
}
func (UnimplementedLayoutAdminServer) ListBot(context.Context, *ListBotRequest) (*ListBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBot not implemented")
}
func (UnimplementedLayoutAdminServer) GetBot(context.Context, *GetBotRequest) (*GetBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedLayoutAdminServer) CreateBot(context.Context, *CreateBotRequest) (*CreateBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (UnimplementedLayoutAdminServer) UpdateBot(context.Context, *UpdateBotRequest) (*UpdateBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBot not implemented")
}
func (UnimplementedLayoutAdminServer) DeleteBot(context.Context, *DeleteBotRequest) (*DeleteBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (UnimplementedLayoutAdminServer) mustEmbedUnimplementedLayoutAdminServer() {}

// UnsafeLayoutAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LayoutAdminServer will
// result in compilation errors.
type UnsafeLayoutAdminServer interface {
	mustEmbedUnimplementedLayoutAdminServer()
}

func RegisterLayoutAdminServer(s grpc.ServiceRegistrar, srv LayoutAdminServer) {
	s.RegisterService(&LayoutAdmin_ServiceDesc, srv)
}

func _LayoutAdmin_PageBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutAdminServer).PageBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.admin.LayoutAdmin/PageBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutAdminServer).PageBot(ctx, req.(*PageBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutAdmin_ListBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutAdminServer).ListBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.admin.LayoutAdmin/ListBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutAdminServer).ListBot(ctx, req.(*ListBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutAdmin_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutAdminServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.admin.LayoutAdmin/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutAdminServer).GetBot(ctx, req.(*GetBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutAdmin_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutAdminServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.admin.LayoutAdmin/CreateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutAdminServer).CreateBot(ctx, req.(*CreateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutAdmin_UpdateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutAdminServer).UpdateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.admin.LayoutAdmin/UpdateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutAdminServer).UpdateBot(ctx, req.(*UpdateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutAdmin_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutAdminServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.admin.LayoutAdmin/DeleteBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutAdminServer).DeleteBot(ctx, req.(*DeleteBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LayoutAdmin_ServiceDesc is the grpc.ServiceDesc for LayoutAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LayoutAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.admin.LayoutAdmin",
	HandlerType: (*LayoutAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageBot",
			Handler:    _LayoutAdmin_PageBot_Handler,
		},
		{
			MethodName: "ListBot",
			Handler:    _LayoutAdmin_ListBot_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _LayoutAdmin_GetBot_Handler,
		},
		{
			MethodName: "CreateBot",
			Handler:    _LayoutAdmin_CreateBot_Handler,
		},
		{
			MethodName: "UpdateBot",
			Handler:    _LayoutAdmin_UpdateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _LayoutAdmin_DeleteBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/admin/admin.proto",
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.2
// - protoc             v3.21.1
// source: api/layout/v1/api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQuantBotV1ChainBotWebHook = "/api.layout.v1.QuantBotV1/ChainBotWebHook"

type QuantBotV1HTTPServer interface {
	ChainBotWebHook(context.Context, *ChainBotWebHookRequest) (*ChainBotWebHookReply, error)
}

func RegisterQuantBotV1HTTPServer(s *http.Server, srv QuantBotV1HTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/chainbot/webhook", _QuantBotV1_ChainBotWebHook0_HTTP_Handler(srv))
}

func _QuantBotV1_ChainBotWebHook0_HTTP_Handler(srv QuantBotV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChainBotWebHookRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuantBotV1ChainBotWebHook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChainBotWebHook(ctx, req.(*ChainBotWebHookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChainBotWebHookReply)
		return ctx.Result(200, reply)
	}
}

type QuantBotV1HTTPClient interface {
	ChainBotWebHook(ctx context.Context, req *ChainBotWebHookRequest, opts ...http.CallOption) (rsp *ChainBotWebHookReply, err error)
}

type QuantBotV1HTTPClientImpl struct {
	cc *http.Client
}

func NewQuantBotV1HTTPClient(client *http.Client) QuantBotV1HTTPClient {
	return &QuantBotV1HTTPClientImpl{client}
}

func (c *QuantBotV1HTTPClientImpl) ChainBotWebHook(ctx context.Context, in *ChainBotWebHookRequest, opts ...http.CallOption) (*ChainBotWebHookReply, error) {
	var out ChainBotWebHookReply
	pattern := "/api/v1/chainbot/webhook"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuantBotV1ChainBotWebHook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

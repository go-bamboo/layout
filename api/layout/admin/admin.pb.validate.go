// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/layout/admin/admin.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	quantbot "github.com/go-bamboo/layout/api/layout"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = quantbot.BotSource(0)
)

// Validate checks the field values on PageBotRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageBotRequestMultiError,
// or nil if none found.
func (m *PageBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageIndex

	if len(errors) > 0 {
		return PageBotRequestMultiError(errors)
	}

	return nil
}

// PageBotRequestMultiError is an error wrapping multiple validation errors
// returned by PageBotRequest.ValidateAll() if the designated constraints
// aren't met.
type PageBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageBotRequestMultiError) AllErrors() []error { return m }

// PageBotRequestValidationError is the validation error returned by
// PageBotRequest.Validate if the designated constraints aren't met.
type PageBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageBotRequestValidationError) ErrorName() string { return "PageBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageBotRequestValidationError{}

// Validate checks the field values on PageBotReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageBotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageBotReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageBotReplyMultiError, or
// nil if none found.
func (m *PageBotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageBotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageBotReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageBotReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageBotReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageBotReplyMultiError(errors)
	}

	return nil
}

// PageBotReplyMultiError is an error wrapping multiple validation errors
// returned by PageBotReply.ValidateAll() if the designated constraints aren't met.
type PageBotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageBotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageBotReplyMultiError) AllErrors() []error { return m }

// PageBotReplyValidationError is the validation error returned by
// PageBotReply.Validate if the designated constraints aren't met.
type PageBotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageBotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageBotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageBotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageBotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageBotReplyValidationError) ErrorName() string { return "PageBotReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageBotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageBotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageBotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageBotReplyValidationError{}

// Validate checks the field values on ListBotRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListBotRequestMultiError,
// or nil if none found.
func (m *ListBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChiainId

	// no validation rules for Status

	if len(errors) > 0 {
		return ListBotRequestMultiError(errors)
	}

	return nil
}

// ListBotRequestMultiError is an error wrapping multiple validation errors
// returned by ListBotRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBotRequestMultiError) AllErrors() []error { return m }

// ListBotRequestValidationError is the validation error returned by
// ListBotRequest.Validate if the designated constraints aren't met.
type ListBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBotRequestValidationError) ErrorName() string { return "ListBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBotRequestValidationError{}

// Validate checks the field values on ListBotReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBotReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListBotReplyMultiError, or
// nil if none found.
func (m *ListBotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBotReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBotReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBotReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBotReplyMultiError(errors)
	}

	return nil
}

// ListBotReplyMultiError is an error wrapping multiple validation errors
// returned by ListBotReply.ValidateAll() if the designated constraints aren't met.
type ListBotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBotReplyMultiError) AllErrors() []error { return m }

// ListBotReplyValidationError is the validation error returned by
// ListBotReply.Validate if the designated constraints aren't met.
type ListBotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBotReplyValidationError) ErrorName() string { return "ListBotReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListBotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBotReplyValidationError{}

// Validate checks the field values on GetBotRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBotRequestMultiError, or
// nil if none found.
func (m *GetBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBotRequestMultiError(errors)
	}

	return nil
}

// GetBotRequestMultiError is an error wrapping multiple validation errors
// returned by GetBotRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBotRequestMultiError) AllErrors() []error { return m }

// GetBotRequestValidationError is the validation error returned by
// GetBotRequest.Validate if the designated constraints aren't met.
type GetBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBotRequestValidationError) ErrorName() string { return "GetBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBotRequestValidationError{}

// Validate checks the field values on GetBotReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBotReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBotReplyMultiError, or
// nil if none found.
func (m *GetBotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBotReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBotReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBotReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBotReplyMultiError(errors)
	}

	return nil
}

// GetBotReplyMultiError is an error wrapping multiple validation errors
// returned by GetBotReply.ValidateAll() if the designated constraints aren't met.
type GetBotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBotReplyMultiError) AllErrors() []error { return m }

// GetBotReplyValidationError is the validation error returned by
// GetBotReply.Validate if the designated constraints aren't met.
type GetBotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBotReplyValidationError) ErrorName() string { return "GetBotReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetBotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBotReplyValidationError{}

// Validate checks the field values on CreateBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBotRequestMultiError, or nil if none found.
func (m *CreateBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _CreateBotRequest_Source_InLookup[m.GetSource()]; !ok {
		err := CreateBotRequestValidationError{
			field:  "Source",
			reason: "value must be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBotId()) < 1 {
		err := CreateBotRequestValidationError{
			field:  "BotId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSubId()) < 1 {
		err := CreateBotRequestValidationError{
			field:  "SubId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDriverType()) < 1 {
		err := CreateBotRequestValidationError{
			field:  "DriverType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNotifyTemplate()) < 1 {
		err := CreateBotRequestValidationError{
			field:  "NotifyTemplate",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTemplateId() <= 0 {
		err := CreateBotRequestValidationError{
			field:  "TemplateId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateBotRequestMultiError(errors)
	}

	return nil
}

// CreateBotRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBotRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBotRequestMultiError) AllErrors() []error { return m }

// CreateBotRequestValidationError is the validation error returned by
// CreateBotRequest.Validate if the designated constraints aren't met.
type CreateBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBotRequestValidationError) ErrorName() string { return "CreateBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBotRequestValidationError{}

var _CreateBotRequest_Source_InLookup = map[quantbot.BotSource]struct{}{
	0: {},
}

// Validate checks the field values on CreateBotReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateBotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBotReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateBotReplyMultiError,
// or nil if none found.
func (m *CreateBotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBotReplyMultiError(errors)
	}

	return nil
}

// CreateBotReplyMultiError is an error wrapping multiple validation errors
// returned by CreateBotReply.ValidateAll() if the designated constraints
// aren't met.
type CreateBotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBotReplyMultiError) AllErrors() []error { return m }

// CreateBotReplyValidationError is the validation error returned by
// CreateBotReply.Validate if the designated constraints aren't met.
type CreateBotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBotReplyValidationError) ErrorName() string { return "CreateBotReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateBotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBotReplyValidationError{}

// Validate checks the field values on UpdateBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBotRequestMultiError, or nil if none found.
func (m *UpdateBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateBotRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateBotRequest_Source_InLookup[m.GetSource()]; !ok {
		err := UpdateBotRequestValidationError{
			field:  "Source",
			reason: "value must be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBotId()) < 1 {
		err := UpdateBotRequestValidationError{
			field:  "BotId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSubId()) < 1 {
		err := UpdateBotRequestValidationError{
			field:  "SubId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDriverType()) < 1 {
		err := UpdateBotRequestValidationError{
			field:  "DriverType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNotifyTemplate()) < 1 {
		err := UpdateBotRequestValidationError{
			field:  "NotifyTemplate",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTemplateId() <= 0 {
		err := UpdateBotRequestValidationError{
			field:  "TemplateId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateBotRequestMultiError(errors)
	}

	return nil
}

// UpdateBotRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBotRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBotRequestMultiError) AllErrors() []error { return m }

// UpdateBotRequestValidationError is the validation error returned by
// UpdateBotRequest.Validate if the designated constraints aren't met.
type UpdateBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBotRequestValidationError) ErrorName() string { return "UpdateBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBotRequestValidationError{}

var _UpdateBotRequest_Source_InLookup = map[quantbot.BotSource]struct{}{
	0: {},
}

// Validate checks the field values on UpdateBotReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateBotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBotReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateBotReplyMultiError,
// or nil if none found.
func (m *UpdateBotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBotReplyMultiError(errors)
	}

	return nil
}

// UpdateBotReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateBotReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateBotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBotReplyMultiError) AllErrors() []error { return m }

// UpdateBotReplyValidationError is the validation error returned by
// UpdateBotReply.Validate if the designated constraints aren't met.
type UpdateBotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBotReplyValidationError) ErrorName() string { return "UpdateBotReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBotReplyValidationError{}

// Validate checks the field values on DeleteBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBotRequestMultiError, or nil if none found.
func (m *DeleteBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ids

	if len(errors) > 0 {
		return DeleteBotRequestMultiError(errors)
	}

	return nil
}

// DeleteBotRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBotRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBotRequestMultiError) AllErrors() []error { return m }

// DeleteBotRequestValidationError is the validation error returned by
// DeleteBotRequest.Validate if the designated constraints aren't met.
type DeleteBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBotRequestValidationError) ErrorName() string { return "DeleteBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBotRequestValidationError{}

// Validate checks the field values on DeleteBotReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteBotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBotReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteBotReplyMultiError,
// or nil if none found.
func (m *DeleteBotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBotReplyMultiError(errors)
	}

	return nil
}

// DeleteBotReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteBotReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteBotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBotReplyMultiError) AllErrors() []error { return m }

// DeleteBotReplyValidationError is the validation error returned by
// DeleteBotReply.Validate if the designated constraints aren't met.
type DeleteBotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBotReplyValidationError) ErrorName() string { return "DeleteBotReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBotReplyValidationError{}

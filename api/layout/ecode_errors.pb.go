// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package layout

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsBotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BOT_EXIST.String() && e.Code == 500
}

func ErrorBotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsSubscriptionNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SUBSCRIPTION_NOT_EXIST.String() && e.Code == 500
}

func ErrorSubscriptionNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SUBSCRIPTION_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsSubscriptionIdNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SUBSCRIPTION_ID_NOT_EXIST.String() && e.Code == 500
}

func ErrorSubscriptionIdNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SUBSCRIPTION_ID_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsTemplateNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TEMPLATE_NOT_FOUND.String() && e.Code == 500
}

func ErrorTemplateNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TEMPLATE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsCopierCov(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_COPIER_COV.String() && e.Code == 500
}

func ErrorCopierCov(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_COPIER_COV.String(), fmt.Sprintf(format, args...))
}

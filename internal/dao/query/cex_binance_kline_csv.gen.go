// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-bamboo/layout/internal/dao/model"
)

func newCexBinanceKlineCsv(db *gorm.DB, opts ...gen.DOOption) cexBinanceKlineCsv {
	_cexBinanceKlineCsv := cexBinanceKlineCsv{}

	_cexBinanceKlineCsv.cexBinanceKlineCsvDo.UseDB(db, opts...)
	_cexBinanceKlineCsv.cexBinanceKlineCsvDo.UseModel(&model.CexBinanceKlineCsv{})

	tableName := _cexBinanceKlineCsv.cexBinanceKlineCsvDo.TableName()
	_cexBinanceKlineCsv.ALL = field.NewAsterisk(tableName)
	_cexBinanceKlineCsv.ID = field.NewInt64(tableName, "id")
	_cexBinanceKlineCsv.Event = field.NewString(tableName, "event")
	_cexBinanceKlineCsv.Symbol = field.NewString(tableName, "symbol")
	_cexBinanceKlineCsv.Interval = field.NewString(tableName, "interval")
	_cexBinanceKlineCsv.StartTime = field.NewInt64(tableName, "start_time")
	_cexBinanceKlineCsv.EndTime = field.NewInt64(tableName, "end_time")
	_cexBinanceKlineCsv.File = field.NewString(tableName, "file")
	_cexBinanceKlineCsv.CreatedAt = field.NewTime(tableName, "created_at")
	_cexBinanceKlineCsv.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cexBinanceKlineCsv.DeletedAt = field.NewField(tableName, "deleted_at")

	_cexBinanceKlineCsv.fillFieldMap()

	return _cexBinanceKlineCsv
}

type cexBinanceKlineCsv struct {
	cexBinanceKlineCsvDo cexBinanceKlineCsvDo

	ALL       field.Asterisk
	ID        field.Int64
	Event     field.String
	Symbol    field.String
	Interval  field.String
	StartTime field.Int64
	EndTime   field.Int64
	File      field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (c cexBinanceKlineCsv) Table(newTableName string) *cexBinanceKlineCsv {
	c.cexBinanceKlineCsvDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cexBinanceKlineCsv) As(alias string) *cexBinanceKlineCsv {
	c.cexBinanceKlineCsvDo.DO = *(c.cexBinanceKlineCsvDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cexBinanceKlineCsv) updateTableName(table string) *cexBinanceKlineCsv {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Event = field.NewString(table, "event")
	c.Symbol = field.NewString(table, "symbol")
	c.Interval = field.NewString(table, "interval")
	c.StartTime = field.NewInt64(table, "start_time")
	c.EndTime = field.NewInt64(table, "end_time")
	c.File = field.NewString(table, "file")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cexBinanceKlineCsv) WithContext(ctx context.Context) *cexBinanceKlineCsvDo {
	return c.cexBinanceKlineCsvDo.WithContext(ctx)
}

func (c cexBinanceKlineCsv) TableName() string { return c.cexBinanceKlineCsvDo.TableName() }

func (c cexBinanceKlineCsv) Alias() string { return c.cexBinanceKlineCsvDo.Alias() }

func (c *cexBinanceKlineCsv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cexBinanceKlineCsv) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["event"] = c.Event
	c.fieldMap["symbol"] = c.Symbol
	c.fieldMap["interval"] = c.Interval
	c.fieldMap["start_time"] = c.StartTime
	c.fieldMap["end_time"] = c.EndTime
	c.fieldMap["file"] = c.File
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c cexBinanceKlineCsv) clone(db *gorm.DB) cexBinanceKlineCsv {
	c.cexBinanceKlineCsvDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cexBinanceKlineCsv) replaceDB(db *gorm.DB) cexBinanceKlineCsv {
	c.cexBinanceKlineCsvDo.ReplaceDB(db)
	return c
}

type cexBinanceKlineCsvDo struct{ gen.DO }

func (c cexBinanceKlineCsvDo) Debug() *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Debug())
}

func (c cexBinanceKlineCsvDo) WithContext(ctx context.Context) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cexBinanceKlineCsvDo) ReadDB() *cexBinanceKlineCsvDo {
	return c.Clauses(dbresolver.Read)
}

func (c cexBinanceKlineCsvDo) WriteDB() *cexBinanceKlineCsvDo {
	return c.Clauses(dbresolver.Write)
}

func (c cexBinanceKlineCsvDo) Session(config *gorm.Session) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Session(config))
}

func (c cexBinanceKlineCsvDo) Clauses(conds ...clause.Expression) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cexBinanceKlineCsvDo) Returning(value interface{}, columns ...string) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cexBinanceKlineCsvDo) Not(conds ...gen.Condition) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cexBinanceKlineCsvDo) Or(conds ...gen.Condition) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cexBinanceKlineCsvDo) Select(conds ...field.Expr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cexBinanceKlineCsvDo) Where(conds ...gen.Condition) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cexBinanceKlineCsvDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *cexBinanceKlineCsvDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cexBinanceKlineCsvDo) Order(conds ...field.Expr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cexBinanceKlineCsvDo) Distinct(cols ...field.Expr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cexBinanceKlineCsvDo) Omit(cols ...field.Expr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cexBinanceKlineCsvDo) Join(table schema.Tabler, on ...field.Expr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cexBinanceKlineCsvDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cexBinanceKlineCsvDo) RightJoin(table schema.Tabler, on ...field.Expr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cexBinanceKlineCsvDo) Group(cols ...field.Expr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cexBinanceKlineCsvDo) Having(conds ...gen.Condition) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cexBinanceKlineCsvDo) Limit(limit int) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cexBinanceKlineCsvDo) Offset(offset int) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cexBinanceKlineCsvDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cexBinanceKlineCsvDo) Unscoped() *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cexBinanceKlineCsvDo) Create(values ...*model.CexBinanceKlineCsv) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cexBinanceKlineCsvDo) CreateInBatches(values []*model.CexBinanceKlineCsv, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cexBinanceKlineCsvDo) Save(values ...*model.CexBinanceKlineCsv) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cexBinanceKlineCsvDo) First() (*model.CexBinanceKlineCsv, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexBinanceKlineCsv), nil
	}
}

func (c cexBinanceKlineCsvDo) Take() (*model.CexBinanceKlineCsv, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexBinanceKlineCsv), nil
	}
}

func (c cexBinanceKlineCsvDo) Last() (*model.CexBinanceKlineCsv, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexBinanceKlineCsv), nil
	}
}

func (c cexBinanceKlineCsvDo) Find() ([]*model.CexBinanceKlineCsv, error) {
	result, err := c.DO.Find()
	return result.([]*model.CexBinanceKlineCsv), err
}

func (c cexBinanceKlineCsvDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CexBinanceKlineCsv, err error) {
	buf := make([]*model.CexBinanceKlineCsv, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cexBinanceKlineCsvDo) FindInBatches(result *[]*model.CexBinanceKlineCsv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cexBinanceKlineCsvDo) Attrs(attrs ...field.AssignExpr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cexBinanceKlineCsvDo) Assign(attrs ...field.AssignExpr) *cexBinanceKlineCsvDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cexBinanceKlineCsvDo) Joins(fields ...field.RelationField) *cexBinanceKlineCsvDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cexBinanceKlineCsvDo) Preload(fields ...field.RelationField) *cexBinanceKlineCsvDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cexBinanceKlineCsvDo) FirstOrInit() (*model.CexBinanceKlineCsv, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexBinanceKlineCsv), nil
	}
}

func (c cexBinanceKlineCsvDo) FirstOrCreate() (*model.CexBinanceKlineCsv, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexBinanceKlineCsv), nil
	}
}

func (c cexBinanceKlineCsvDo) FindByPage(offset int, limit int) (result []*model.CexBinanceKlineCsv, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cexBinanceKlineCsvDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cexBinanceKlineCsvDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cexBinanceKlineCsvDo) Delete(models ...*model.CexBinanceKlineCsv) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cexBinanceKlineCsvDo) withDO(do gen.Dao) *cexBinanceKlineCsvDo {
	c.DO = *do.(*gen.DO)
	return c
}

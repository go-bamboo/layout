// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-bamboo/layout/internal/dao/model"
)

func newCexOrder(db *gorm.DB, opts ...gen.DOOption) cexOrder {
	_cexOrder := cexOrder{}

	_cexOrder.cexOrderDo.UseDB(db, opts...)
	_cexOrder.cexOrderDo.UseModel(&model.CexOrder{})

	tableName := _cexOrder.cexOrderDo.TableName()
	_cexOrder.ALL = field.NewAsterisk(tableName)
	_cexOrder.ID = field.NewInt64(tableName, "id")
	_cexOrder.Symbol = field.NewString(tableName, "symbol")
	_cexOrder.Price = field.NewFloat64(tableName, "price")
	_cexOrder.Quantity = field.NewFloat64(tableName, "quantity")
	_cexOrder.Status = field.NewInt32(tableName, "status")
	_cexOrder.CreateBy = field.NewInt64(tableName, "create_by")
	_cexOrder.UpdateBy = field.NewInt64(tableName, "update_by")
	_cexOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_cexOrder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cexOrder.DeletedAt = field.NewField(tableName, "deleted_at")

	_cexOrder.fillFieldMap()

	return _cexOrder
}

type cexOrder struct {
	cexOrderDo cexOrderDo

	ALL       field.Asterisk
	ID        field.Int64
	Symbol    field.String
	Price     field.Float64
	Quantity  field.Float64
	Status    field.Int32
	CreateBy  field.Int64
	UpdateBy  field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (c cexOrder) Table(newTableName string) *cexOrder {
	c.cexOrderDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cexOrder) As(alias string) *cexOrder {
	c.cexOrderDo.DO = *(c.cexOrderDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cexOrder) updateTableName(table string) *cexOrder {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Symbol = field.NewString(table, "symbol")
	c.Price = field.NewFloat64(table, "price")
	c.Quantity = field.NewFloat64(table, "quantity")
	c.Status = field.NewInt32(table, "status")
	c.CreateBy = field.NewInt64(table, "create_by")
	c.UpdateBy = field.NewInt64(table, "update_by")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cexOrder) WithContext(ctx context.Context) *cexOrderDo { return c.cexOrderDo.WithContext(ctx) }

func (c cexOrder) TableName() string { return c.cexOrderDo.TableName() }

func (c cexOrder) Alias() string { return c.cexOrderDo.Alias() }

func (c *cexOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cexOrder) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["symbol"] = c.Symbol
	c.fieldMap["price"] = c.Price
	c.fieldMap["quantity"] = c.Quantity
	c.fieldMap["status"] = c.Status
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c cexOrder) clone(db *gorm.DB) cexOrder {
	c.cexOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cexOrder) replaceDB(db *gorm.DB) cexOrder {
	c.cexOrderDo.ReplaceDB(db)
	return c
}

type cexOrderDo struct{ gen.DO }

func (c cexOrderDo) Debug() *cexOrderDo {
	return c.withDO(c.DO.Debug())
}

func (c cexOrderDo) WithContext(ctx context.Context) *cexOrderDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cexOrderDo) ReadDB() *cexOrderDo {
	return c.Clauses(dbresolver.Read)
}

func (c cexOrderDo) WriteDB() *cexOrderDo {
	return c.Clauses(dbresolver.Write)
}

func (c cexOrderDo) Session(config *gorm.Session) *cexOrderDo {
	return c.withDO(c.DO.Session(config))
}

func (c cexOrderDo) Clauses(conds ...clause.Expression) *cexOrderDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cexOrderDo) Returning(value interface{}, columns ...string) *cexOrderDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cexOrderDo) Not(conds ...gen.Condition) *cexOrderDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cexOrderDo) Or(conds ...gen.Condition) *cexOrderDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cexOrderDo) Select(conds ...field.Expr) *cexOrderDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cexOrderDo) Where(conds ...gen.Condition) *cexOrderDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cexOrderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *cexOrderDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cexOrderDo) Order(conds ...field.Expr) *cexOrderDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cexOrderDo) Distinct(cols ...field.Expr) *cexOrderDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cexOrderDo) Omit(cols ...field.Expr) *cexOrderDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cexOrderDo) Join(table schema.Tabler, on ...field.Expr) *cexOrderDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cexOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cexOrderDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cexOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) *cexOrderDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cexOrderDo) Group(cols ...field.Expr) *cexOrderDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cexOrderDo) Having(conds ...gen.Condition) *cexOrderDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cexOrderDo) Limit(limit int) *cexOrderDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cexOrderDo) Offset(offset int) *cexOrderDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cexOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cexOrderDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cexOrderDo) Unscoped() *cexOrderDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cexOrderDo) Create(values ...*model.CexOrder) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cexOrderDo) CreateInBatches(values []*model.CexOrder, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cexOrderDo) Save(values ...*model.CexOrder) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cexOrderDo) First() (*model.CexOrder, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexOrder), nil
	}
}

func (c cexOrderDo) Take() (*model.CexOrder, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexOrder), nil
	}
}

func (c cexOrderDo) Last() (*model.CexOrder, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexOrder), nil
	}
}

func (c cexOrderDo) Find() ([]*model.CexOrder, error) {
	result, err := c.DO.Find()
	return result.([]*model.CexOrder), err
}

func (c cexOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CexOrder, err error) {
	buf := make([]*model.CexOrder, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cexOrderDo) FindInBatches(result *[]*model.CexOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cexOrderDo) Attrs(attrs ...field.AssignExpr) *cexOrderDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cexOrderDo) Assign(attrs ...field.AssignExpr) *cexOrderDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cexOrderDo) Joins(fields ...field.RelationField) *cexOrderDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cexOrderDo) Preload(fields ...field.RelationField) *cexOrderDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cexOrderDo) FirstOrInit() (*model.CexOrder, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexOrder), nil
	}
}

func (c cexOrderDo) FirstOrCreate() (*model.CexOrder, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CexOrder), nil
	}
}

func (c cexOrderDo) FindByPage(offset int, limit int) (result []*model.CexOrder, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cexOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cexOrderDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cexOrderDo) Delete(models ...*model.CexOrder) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cexOrderDo) withDO(do gen.Dao) *cexOrderDo {
	c.DO = *do.(*gen.DO)
	return c
}

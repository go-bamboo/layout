// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/conf/conf.proto

package conf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Bootstrap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bootstrap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bootstrap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BootstrapMultiError, or nil
// if none found.
func (m *Bootstrap) ValidateAll() error {
	return m.validate(true)
}

func (m *Bootstrap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Server",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Reg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Reg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Reg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTrace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Trace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Trace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Trace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Logger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Logger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Logger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRabbitMq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "RabbitMq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "RabbitMq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRabbitMq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "RabbitMq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetKafka()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Kafka",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Kafka",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKafka()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Kafka",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMarket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMarket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Market",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BootstrapMultiError(errors)
	}

	return nil
}

// BootstrapMultiError is an error wrapping multiple validation errors returned
// by Bootstrap.ValidateAll() if the designated constraints aren't met.
type BootstrapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapMultiError) AllErrors() []error { return m }

// BootstrapValidationError is the validation error returned by
// Bootstrap.Validate if the designated constraints aren't met.
type BootstrapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapValidationError) ErrorName() string { return "BootstrapValidationError" }

// Error satisfies the builtin error interface
func (e BootstrapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Grpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDatabase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Database",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Database",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDatabase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Database",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Kline1MCSV

	// no validation rules for Kline15MCSV

	// no validation rules for Kline30MCSV

	// no validation rules for CsvPath

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on RabbitMq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RabbitMq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RabbitMq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RabbitMqMultiError, or nil
// if none found.
func (m *RabbitMq) ValidateAll() error {
	return m.validate(true)
}

func (m *RabbitMq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RabbitMqValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RabbitMqValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RabbitMqValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RabbitMqMultiError(errors)
	}

	return nil
}

// RabbitMqMultiError is an error wrapping multiple validation errors returned
// by RabbitMq.ValidateAll() if the designated constraints aren't met.
type RabbitMqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RabbitMqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RabbitMqMultiError) AllErrors() []error { return m }

// RabbitMqValidationError is the validation error returned by
// RabbitMq.Validate if the designated constraints aren't met.
type RabbitMqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RabbitMqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RabbitMqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RabbitMqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RabbitMqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RabbitMqValidationError) ErrorName() string { return "RabbitMqValidationError" }

// Error satisfies the builtin error interface
func (e RabbitMqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRabbitMq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RabbitMqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RabbitMqValidationError{}

// Validate checks the field values on Kafka with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kafka) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kafka with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KafkaMultiError, or nil if none found.
func (m *Kafka) ValidateAll() error {
	return m.validate(true)
}

func (m *Kafka) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Brokers

	if all {
		switch v := interface{}(m.GetNet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Net",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Net",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KafkaValidationError{
				field:  "Net",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KafkaValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProducer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Producer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Producer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProducer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KafkaValidationError{
				field:  "Producer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KafkaMultiError(errors)
	}

	return nil
}

// KafkaMultiError is an error wrapping multiple validation errors returned by
// Kafka.ValidateAll() if the designated constraints aren't met.
type KafkaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KafkaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KafkaMultiError) AllErrors() []error { return m }

// KafkaValidationError is the validation error returned by Kafka.Validate if
// the designated constraints aren't met.
type KafkaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KafkaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KafkaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KafkaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KafkaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KafkaValidationError) ErrorName() string { return "KafkaValidationError" }

// Error satisfies the builtin error interface
func (e KafkaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKafka.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KafkaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KafkaValidationError{}

// Validate checks the field values on Market with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Market) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Market with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MarketMultiError, or nil if none found.
func (m *Market) ValidateAll() error {
	return m.validate(true)
}

func (m *Market) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	// no validation rules for SecretKey

	if len(errors) > 0 {
		return MarketMultiError(errors)
	}

	return nil
}

// MarketMultiError is an error wrapping multiple validation errors returned by
// Market.ValidateAll() if the designated constraints aren't met.
type MarketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarketMultiError) AllErrors() []error { return m }

// MarketValidationError is the validation error returned by Market.Validate if
// the designated constraints aren't met.
type MarketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarketValidationError) ErrorName() string { return "MarketValidationError" }

// Error satisfies the builtin error interface
func (e MarketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarketValidationError{}

// Validate checks the field values on RabbitMq_Consumer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RabbitMq_Consumer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RabbitMq_Consumer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RabbitMq_ConsumerMultiError, or nil if none found.
func (m *RabbitMq_Consumer) ValidateAll() error {
	return m.validate(true)
}

func (m *RabbitMq_Consumer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RabbitMq_ConsumerMultiError(errors)
	}

	return nil
}

// RabbitMq_ConsumerMultiError is an error wrapping multiple validation errors
// returned by RabbitMq_Consumer.ValidateAll() if the designated constraints
// aren't met.
type RabbitMq_ConsumerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RabbitMq_ConsumerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RabbitMq_ConsumerMultiError) AllErrors() []error { return m }

// RabbitMq_ConsumerValidationError is the validation error returned by
// RabbitMq_Consumer.Validate if the designated constraints aren't met.
type RabbitMq_ConsumerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RabbitMq_ConsumerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RabbitMq_ConsumerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RabbitMq_ConsumerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RabbitMq_ConsumerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RabbitMq_ConsumerValidationError) ErrorName() string {
	return "RabbitMq_ConsumerValidationError"
}

// Error satisfies the builtin error interface
func (e RabbitMq_ConsumerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRabbitMq_Consumer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RabbitMq_ConsumerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RabbitMq_ConsumerValidationError{}

// Validate checks the field values on Kafka_Net with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kafka_Net) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kafka_Net with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Kafka_NetMultiError, or nil
// if none found.
func (m *Kafka_Net) ValidateAll() error {
	return m.validate(true)
}

func (m *Kafka_Net) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSasl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Kafka_NetValidationError{
					field:  "Sasl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Kafka_NetValidationError{
					field:  "Sasl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSasl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Kafka_NetValidationError{
				field:  "Sasl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Kafka_NetValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Kafka_NetValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Kafka_NetValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Kafka_NetMultiError(errors)
	}

	return nil
}

// Kafka_NetMultiError is an error wrapping multiple validation errors returned
// by Kafka_Net.ValidateAll() if the designated constraints aren't met.
type Kafka_NetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Kafka_NetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Kafka_NetMultiError) AllErrors() []error { return m }

// Kafka_NetValidationError is the validation error returned by
// Kafka_Net.Validate if the designated constraints aren't met.
type Kafka_NetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Kafka_NetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Kafka_NetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Kafka_NetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Kafka_NetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Kafka_NetValidationError) ErrorName() string { return "Kafka_NetValidationError" }

// Error satisfies the builtin error interface
func (e Kafka_NetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKafka_Net.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Kafka_NetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Kafka_NetValidationError{}

// Validate checks the field values on Kafka_Consumer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kafka_Consumer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kafka_Consumer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Kafka_ConsumerMultiError,
// or nil if none found.
func (m *Kafka_Consumer) ValidateAll() error {
	return m.validate(true)
}

func (m *Kafka_Consumer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for Group

	if all {
		switch v := interface{}(m.GetReadTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Kafka_ConsumerValidationError{
					field:  "ReadTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Kafka_ConsumerValidationError{
					field:  "ReadTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Kafka_ConsumerValidationError{
				field:  "ReadTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWriteTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Kafka_ConsumerValidationError{
					field:  "WriteTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Kafka_ConsumerValidationError{
					field:  "WriteTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWriteTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Kafka_ConsumerValidationError{
				field:  "WriteTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Acks

	if len(errors) > 0 {
		return Kafka_ConsumerMultiError(errors)
	}

	return nil
}

// Kafka_ConsumerMultiError is an error wrapping multiple validation errors
// returned by Kafka_Consumer.ValidateAll() if the designated constraints
// aren't met.
type Kafka_ConsumerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Kafka_ConsumerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Kafka_ConsumerMultiError) AllErrors() []error { return m }

// Kafka_ConsumerValidationError is the validation error returned by
// Kafka_Consumer.Validate if the designated constraints aren't met.
type Kafka_ConsumerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Kafka_ConsumerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Kafka_ConsumerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Kafka_ConsumerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Kafka_ConsumerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Kafka_ConsumerValidationError) ErrorName() string { return "Kafka_ConsumerValidationError" }

// Error satisfies the builtin error interface
func (e Kafka_ConsumerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKafka_Consumer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Kafka_ConsumerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Kafka_ConsumerValidationError{}

// Validate checks the field values on Kafka_Producer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kafka_Producer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kafka_Producer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Kafka_ProducerMultiError,
// or nil if none found.
func (m *Kafka_Producer) ValidateAll() error {
	return m.validate(true)
}

func (m *Kafka_Producer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	if len(errors) > 0 {
		return Kafka_ProducerMultiError(errors)
	}

	return nil
}

// Kafka_ProducerMultiError is an error wrapping multiple validation errors
// returned by Kafka_Producer.ValidateAll() if the designated constraints
// aren't met.
type Kafka_ProducerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Kafka_ProducerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Kafka_ProducerMultiError) AllErrors() []error { return m }

// Kafka_ProducerValidationError is the validation error returned by
// Kafka_Producer.Validate if the designated constraints aren't met.
type Kafka_ProducerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Kafka_ProducerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Kafka_ProducerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Kafka_ProducerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Kafka_ProducerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Kafka_ProducerValidationError) ErrorName() string { return "Kafka_ProducerValidationError" }

// Error satisfies the builtin error interface
func (e Kafka_ProducerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKafka_Producer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Kafka_ProducerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Kafka_ProducerValidationError{}

// Validate checks the field values on Kafka_Net_SASL with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kafka_Net_SASL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kafka_Net_SASL with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Kafka_Net_SASLMultiError,
// or nil if none found.
func (m *Kafka_Net_SASL) ValidateAll() error {
	return m.validate(true)
}

func (m *Kafka_Net_SASL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for User

	// no validation rules for Password

	if len(errors) > 0 {
		return Kafka_Net_SASLMultiError(errors)
	}

	return nil
}

// Kafka_Net_SASLMultiError is an error wrapping multiple validation errors
// returned by Kafka_Net_SASL.ValidateAll() if the designated constraints
// aren't met.
type Kafka_Net_SASLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Kafka_Net_SASLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Kafka_Net_SASLMultiError) AllErrors() []error { return m }

// Kafka_Net_SASLValidationError is the validation error returned by
// Kafka_Net_SASL.Validate if the designated constraints aren't met.
type Kafka_Net_SASLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Kafka_Net_SASLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Kafka_Net_SASLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Kafka_Net_SASLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Kafka_Net_SASLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Kafka_Net_SASLValidationError) ErrorName() string { return "Kafka_Net_SASLValidationError" }

// Error satisfies the builtin error interface
func (e Kafka_Net_SASLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKafka_Net_SASL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Kafka_Net_SASLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Kafka_Net_SASLValidationError{}

// Validate checks the field values on Kafka_Net_TLS with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kafka_Net_TLS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kafka_Net_TLS with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Kafka_Net_TLSMultiError, or
// nil if none found.
func (m *Kafka_Net_TLS) ValidateAll() error {
	return m.validate(true)
}

func (m *Kafka_Net_TLS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for RootCa

	// no validation rules for Jks

	// no validation rules for Password

	// no validation rules for Cert

	// no validation rules for Key

	if len(errors) > 0 {
		return Kafka_Net_TLSMultiError(errors)
	}

	return nil
}

// Kafka_Net_TLSMultiError is an error wrapping multiple validation errors
// returned by Kafka_Net_TLS.ValidateAll() if the designated constraints
// aren't met.
type Kafka_Net_TLSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Kafka_Net_TLSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Kafka_Net_TLSMultiError) AllErrors() []error { return m }

// Kafka_Net_TLSValidationError is the validation error returned by
// Kafka_Net_TLS.Validate if the designated constraints aren't met.
type Kafka_Net_TLSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Kafka_Net_TLSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Kafka_Net_TLSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Kafka_Net_TLSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Kafka_Net_TLSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Kafka_Net_TLSValidationError) ErrorName() string { return "Kafka_Net_TLSValidationError" }

// Error satisfies the builtin error interface
func (e Kafka_Net_TLSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKafka_Net_TLS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Kafka_Net_TLSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Kafka_Net_TLSValidationError{}
